#include <WiFi.h>
#include <aJSON.h>
#include "BluetoothSerial.h"
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif
void  checkIn();
void processMessage(aJsonObject *msg);
void sayToClient(String client_id, String content);
void sayToClient2(String client_id2, String content2);
BluetoothSerial SerialBT;
int LED_BUILTIN4 = 23;  
int LED_BUILTIN3 = 22;
int LED_BUILTIN2 = 19;
int LED_BUILTIN1 = 12;
#define LED7 26
#define LEDA 27
char ON = 'O';
char OFF = 'I';
char KEY1 = 'A';
char KEY2 = 'B';
char KEY3 = 'C';
void  checkIn();
//=============  此处必须修改============
String DEVICEID="20333";//你的设备编号==改成你贝壳物联里智能设备的ID
String APIKEY="cf2f84594";//设备密码==改成你贝壳物联里智能设备的密码?
const char* ssid="101104";//WiFi名称  你的WIFI名称
const char* password="zxm101104";//WiFi密码 你的WIFI密码
//=======================================
#define OUT4 23//输出控制继电器端
#define OUT3 22//输出控制继电器端
#define OUT2 19//输出控制继电器端
#define OUT1 18//输出控制继电器端
//=======================================
unsigned long lastCheckInTime=0;//记录上次报到时间
const unsigned long postingInterval=40000;//每隔40秒向服务器报到一次
const char* host="www.bigiot.net"
const int httpPort=8181;
// const char* host="192.168.4.1";
// const int httpPort=5000;
WiFiClient client;
int x;//缓存函数
String comdata = "";//字符串函数
String client_id2="U14357";
void setup({
  Serial.begin(115200);
 // Serial.begin(9600);
  SerialBT.begin("ESP32test"); //Bluetooth device name
  Serial.println("The device started, now you can pair it with bluetooth!");
  pinMode(OUT4,OUTPUT);//设置输出
  digitalWrite(OUT4,HIGH);//上电打开输出
  pinMode(LED_BUILTIN4,OUTPUT);//设备板载LED输出模式
  digitalWrite(LED_BUILTIN4,HIGH);//关闭LED
  pinMode(OUT3,OUTPUT);//设置输出
  digitalWrite(OUT3,HIGH);//上电打开输出
  pinMode(LED_BUILTIN3,OUTPUT);//设备板载LED输出模式
  digitalWrite(LED_BUILTIN3,HIGH);//关闭LED
  pinMode(OUT2,OUTPUT);//设置输出
  digitalWrite(OUT2,HIGH);//上电打开输出
  pinMode(LED_BUILTIN2,OUTPUT);//设备板载LED输出模式
  digitalWrite(LED_BUILTIN2,HIGH);//关闭LED
  pinMode(OUT1,OUTPUT);//设置输出
  digitalWrite(OUT1,HIGH);//上电打开输出
  pinMode(LED_BUILTIN1,OUTPUT);//设备板载LED输出模式
  digitalWrite(LED_BUILTIN1,LOW);//关闭LED
  pinMode(LEDA,OUTPUT);//设置输出
  digitalWrite(LEDA,HIGH);//上电打开输出
  pinMode(LED7,INPUT_PULLUP);
  WiFi.begin(ssid,password);//连接WiFi  
  while(WiFi.status()!= WL_CONNECTED)//等待WiFi连接成功
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
}
void loop() {
 if(!client.connected())
  {
    if(!client.connect(host, httpPort))
    {
      Serial.println("connection failed");
      delay(5000);
      return;
    }
  }
  if(millis()-lastCheckInTime>postingInterval||lastCheckInTime==0)
    checkIn();
  // Read all the lines of the reply from server and print them to Serial
  if (client.available())
  {
    String inputString=client.readStringUntil('\n');
    inputString.trim();
    Serial.println(inputString);
    int len=inputString.length()+1;
    if(inputString.startsWith("{") && inputString.endsWith("}"))
    {
      char jsonString[len];
      inputString.toCharArray(jsonString,len);
      aJsonObject *msg = aJson.parse(jsonString);
      processMessage(msg);
      aJson.deleteItem(msg);         
    }
  }
  // if (Serial.available()) {
  //   char msg_char = SerialBT.read();
  //   if (msg_char == ON
  //      {
  //      digitalWrite(LED_BUILTIN4,LOW);//接收到指令就闪一下LED
  //      delay(1000);
  //       digitalWrite(LED_BUILTIN4,HIGH);//接收到指令就闪一下LED
  //      }
  //      if (msg_char == KEY1
  //      {
  //       digitalWrite(LED_BUILTIN3,LOW);//接收到指令就闪一下LED
  //       delay(1000);
  //       digitalWrite(LED_BUILTIN3,HIGH);//接收到指令就闪一下LED
  //      }
  //       if (msg_char == KEY2) 
  //      {
  //       digitalWrite(LED_BUILTIN2,LOW);//接收到指令就闪一下LED
  //       delay(1000);
  //       digitalWrite(LED_BUILTIN2,HIGH);//接收到指令就闪一下LED
  //      }
  //      if (msg_char == KEY3) 
  //      {
  //       digitalWrite(LED_BUILTIN1,LOW);//接收到指令就闪一下LED
  //       delay(1000);
  //       digitalWrite(LED_BUILTIN1,HIGH);//接收到指令就闪一下LED
  //      }
  //   delay(50);
  //   SerialBT.write(Serial.read());
  // }


  if (SerialBT.available(){
    char msg_char1 = SerialBT.read();
    if (msg_char1 == 'P' )
       {
       sayToClient("U14357","P"); //打印接收到的字符
     digitalWrite(LED_BUILTIN1,LOW);//接收到指令就闪一下LED 
      SerialBT.print("LED  on!");  
       }

       if (msg_char1 == 'S' )
       {
       sayToClient("U14357","S"); //打印接收到的字符
     digitalWrite(LED_BUILTIN1,HIGH);//接收到指令就闪一下LED 
      SerialBT.print("LED  off!");  
       }

    Serial.write(SerialBT.read());
  }
  
 //if(digitalRead(LED7) == 0)
 //{
 //  sayToClient2(client_id2,"设备异常");
 //   delay(200);
 //}

  while (Serial.available(> 0)//循环串口是否有数据
    {
        comdata += char(Serial.read());  //每次读一个char字符，并相加
        delay(2);
    }
    if (comdata.length(> 0)
    {
        Serial.println(comdata); //打印接收到的字符
        sayToClient2(client_id2,comdata);
        comdata = "";//缓存清零
    }
        
  delay(20);
}
void processMessage(aJsonObject *msg)
{
  aJsonObject* method=aJson.getObjectItem(msg,"M");
  aJsonObject* content=aJson.getObjectItem(msg,"C");     
  aJsonObject* client_id=aJson.getObjectItem(msg,"ID");
  if(!method)
    return;
  String M=method->valuestring;
  if(M=="say")
  {  
    String C=content->valuestring;
    String F_C_ID=client_id->valuestring;
      if(C=="play"                                    //接收到的是停止指令
    {
      SerialBT.print("play"); //打印接收到的字符
     digitalWrite(LED_BUILTIN1,LOW);//接收到指令就闪一下LED 
      sayToClient(F_C_ID,"LED  on!");  
  
    }
      if(C=="stop"                                    //接收到的是停止指令
    {
      SerialBT.print("stop"); //打印接收到的字符
        digitalWrite(LED_BUILTIN1,HIGH);//接收到指令就闪一下LED    
      sayToClient(F_C_ID,"LED  off!");  
    }
      if(C=="up"                                    //接收到的是停止指令
    {
       digitalWrite(LED_BUILTIN2,LOW);//接收到指令就闪一下LED
       delay(1000);
        digitalWrite(LED_BUILTIN2,HIGH);//接收到指令就闪一下LED    
      sayToClient(F_C_ID,"LED All on!");  
    }
    if(C=="down")                                     //接收到的是停止指令
    {
      digitalWrite(LED_BUILTIN3,LOW);//接收到指令就闪一下LED
       delay(1000);
        digitalWrite(LED_BUILTIN3,HIGH);//接收到指令就闪一下LED    
      sayToClient(F_C_ID,"LED All on!");   
    }
  if(C=="A")                                   //接收到的是停止指令/接收到的不是停止指令
    {
      //digitalWrite(OUT,LOW);//打开
       digitalWrite(LED_BUILTIN3,LOW);//接收到指令就闪一下LED
       delay(1000);
        digitalWrite(LED_BUILTIN3,HIGH);//接收到指令就闪一下LED    
      sayToClient(F_C_ID,"LED All on!");   
    }
      if(C=="B"                                  //接收到的是停止指令/接收到的不是停止指令
    {
      //digitalWrite(OUT,LOW);//打开
       digitalWrite(LED_BUILTIN2,LOW);//接收到指令就闪一下LED
       delay(1000);
        digitalWrite(LED_BUILTIN2,HIGH);//接收到指令就闪一下LED    
      sayToClient(F_C_ID,"LED All on!");   
    }
         if(C=="C"                                  //接收到的是停止指令/接收到的不是停止指令
    {
      //digitalWrite(OUT,LOW);//打开
       digitalWrite(LED_BUILTIN1,LOW);//接收到指令就闪一下LED
       delay(1000);
        digitalWrite(LED_BUILTIN1,HIGH);//接收到指令就闪一下LED    
      sayToClient(F_C_ID,"LED All on!");   
    }
  }
}
void checkIn()
{
  String msg="{\"M\":\"checkin\",\"ID\":\"" + DEVICEID + "\",\"K\":\"" + APIKEY + "\"}\n";
  client.print(msg);
  lastCheckInTime=millis();
}
void sayToClient(String client_id, String content)
{
  String msg="{\"M\":\"say\",\"ID\":\"" + client_id + "\",\"C\":\"" + content + "\"}\n";
  client.print(msg);
  lastCheckInTime=millis();
}
void sayToClient2(String client_id2, String content2)
{
  String msg2="{\"M\":\"say\",\"ID\":\"" + client_id2 + "\",\"C\":\"" +content2+"\"}\n";
  client.print(msg2);
  lastCheckInTime=millis();
}
